openapi: 3.0.0
info:
  title: MiniBlog API
  version: 1.0.0
  description: |
    JWT‑secured endpoints for users, posts, and auth.
servers:
  - url: http://localhost:4000
    description: Local dev

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # ───── Core models ─────────────────────────────────────────────
    User:
      type: object
      properties:
        _id: { type: string, example: "664ef8c0f2316b3c046f5a55" }
        username: { type: string, example: "Dolly" }
        email: { type: string, format: email, example: "dolly@example.com" }
      required: [_id, username, email]

    Post:
      type: object
      properties:
        _id: { type: string, example: "664ef8c0f2316b3c046f5a12" }
        blogTitle: { type: string, example: "Hello world!" }
        blogContent: { type: string, example: "Good Morning" }
        authorId: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
      required: [_id, blogTitle, blogContent, authorId, createdAt, updatedAt]

    PostWithAuthor:
      allOf:
        - $ref: "#/components/schemas/Post"
        - type: object
          properties:
            author:
              $ref: "#/components/schemas/User"

    # ───── Request bodies ──────────────────────────────────────────
    RegisterBody:
      type: object
      required: [username, email, password]
      properties:
        username: { type: string, example: "Dolly" }
        email: { type: string, format: email, example: "dolly@example.com" }
        password: { type: string, format: password, example: "dolly1234" }

    LoginBody:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password }

    PostCreateBody:
      type: object
      required: [blogTitle, blogContent]
      properties:
        blogTitle: { type: string, example: "My first post" }
        blogContent: { type: string, example: "friends" }

    PostUpdateBody:
      type: object
      required: [blogTitle, blogContent]
      properties:
        blogTitle: { type: string, example: "Hi friends" }
        blogContent: { type: string, example: "Updated text" }

    # ───── Generic responses ──────────────────────────────────────
    SuccessMsg:
      type: object
      properties:
        message: { type: string }
    ErrorResponse:
      type: object
      properties:
        error: { type: string }

paths:
  # ─────────── Auth ───────────────────────────────────────────────
  /api/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/RegisterBody" }
      responses:
        "201":
          description: Registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Successfully registered" }
                  data:
                    type: object
                    properties:
                      token: { type: string }
                      user: { $ref: "#/components/schemas/User" }
        "409":
          description: Email exists
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }

  /api/login:
    post:
      summary: Login user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/LoginBody" }
      responses:
        "200":
          description: Logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Logged-in successfully" }
                  data:
                    type: object
                    properties:
                      token: { type: string }
                      user: { $ref: "#/components/schemas/User" }
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }

  # ─────────── Users ──────────────────────────────────────────────
  /api/users:
    get:
      summary: List all users
      tags: [Users]
      # security: [{ bearerAuth: [] }]
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: Authorization
          description: Authorization, `Bearer <token>`
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Array of users (password omitted)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    {
                      type: string,
                      example: "Successfully fetched the user list",
                    }
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/User" }

  /api/users/{id}:
    get:
      summary: Get single user
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: Authorization
          description: Authorization, `Bearer <token>`
          required: true
          schema:
            type: integer
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    { type: string, example: "Successfully fetched the user" }
                  data: { $ref: "#/components/schemas/User" }
        "404":
          description: Not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }

  # ─────────── Posts ──────────────────────────────────────────────
  /api/posts:
    get:
      summary: List all posts (newest first)
      tags: [Posts]
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: Authorization
          description: Authorization, `Bearer <token>`
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Array of posts with author info
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    { type: string, example: "Posts fetched successfully" }
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/PostWithAuthor" }
    post:
      summary: Create a post
      tags: [Posts]
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: Authorization
          description: Authorization, `Bearer <token>`
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/PostCreateBody" }
      responses:
        "200":
          description: Post created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    { type: string, example: "Post created successfully" }
                  data: { $ref: "#/components/schemas/Post" }
        "400":
          description: Missing blogTitle or blogContent
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }

  /api/posts/{id}:
    get:
      summary: Get one post
      tags: [Posts]
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: Authorization
          description: Authorization, `Bearer <token>`
          required: true
          schema:
            type: integer
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Single post
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    { type: string, example: "Successfully fetched the post" }
                  data: { $ref: "#/components/schemas/Post" }
        "404":
          description: Not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }

    put:
      summary: Update a post (owner only)
      tags: [Posts]
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: Authorization
          description: Authorization, `Bearer <token>`
          required: true
          schema:
            type: integer
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/PostUpdateBody" }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    { type: string, example: "Post updated successfully" }
                  data: { $ref: "#/components/schemas/Post" }
        "404":
          description: Not found or not owner
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }

    delete:
      summary: Delete a post (owner only)
      tags: [Posts]
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: Authorization
          description: Authorization, `Bearer <token>`
          required: true
          schema:
            type: integer
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema: { $ref: "#/components/schemas/SuccessMsg" }
        "404":
          description: Not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }

  /api/posts/user/{userId}:
    get:
      summary: List posts by a specific user
      tags: [Posts]
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: Authorization
          description: Authorization, `Bearer <token>`
          required: true
          schema:
            type: integer
        - in: path
          name: userId
          required: true
          schema: { type: string }
      responses:
        "200":
          description: User + posts
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    {
                      type: string,
                      example: "Successfully fetched the posts created by user",
                    }
                  data:
                    type: object
                    properties:
                      user: { $ref: "#/components/schemas/User" }
                      posts:
                        type: array
                        items: { $ref: "#/components/schemas/Post" }
        "400":
          description: Invalid userId
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
